(* 
    Corrected 3D Secure Protocol Analysis
    -------------------------------------
    This code includes modifications to model possible impersonation attacks
    by a third party, focusing on verifying the authentication property.

    (c) Thanos Drossos, 2024
*)

(* Types *)
type key.  (* Symmetric keys used for encrypting messages between parties *)
type skey. (* Private keys for asymmetric cryptography *)
type pkey. (* Public keys for asymmetric cryptography *)

(* Participants *)
const C: bitstring.     (* Customer participating in the transaction *)
const M: bitstring.     (* Merchant initiating the transaction *)
const ACS: bitstring.   (* Access Control Server responsible for authentication *)

(* Channel *)
channel c. (* Communication channel between participants *)

(* Bitstring type *)

(* Symmetric encryption *)
fun senc(bitstring, key): bitstring.
fun sdec(bitstring, key): bitstring.

(* Symmetric encryption equations *)
equation forall m: bitstring, k: key; sdec(senc(m, k), k) = m.

(* Pairing and projections *)
fun pair(bitstring, bitstring): bitstring.
fun fst(bitstring): bitstring.
fun snd(bitstring): bitstring.

equation forall x: bitstring, y: bitstring; fst(pair(x, y)) = x.
equation forall x: bitstring, y: bitstring; snd(pair(x, y)) = y.

(* Asymmetric encryption *)

(* Digital signature *)
fun sign(bitstring, skey): bitstring [private].

(* Public key function *)
fun pk(skey): pkey.

const m: bitstring.
const sk: skey.

reduc checksign(sign(m, sk), pk(sk)) = m.

(* Keys *)
free keyMC: key [private].    (* Shared key between C and M *)
free keyAC: key [private].    (* Shared key between C and ACS *)
free SK_ACS: skey [private].  (* ACS's private signing key *)

(* ACS's Public Key *)
const PK_ACS: pkey.  (* ACS's public key known to everyone *)

(* Constants representing transaction details *)
const city: bitstring.
const con: bitstring.
const curr: bitstring.
const amt: bitstring.
const mts: bitstring.
const brand: bitstring.
const mname: bitstring.
const mesg: bitstring.
const cconfirm: bitstring.
const mismatch_msg: bitstring.

(* Events *)
event aav_generated(bitstring, bitstring, bitstring).            (* AAV, nonce, transaction details *)
event authentication_verified(bitstring, bitstring, bitstring).  (* AAV, nonce, transaction details *)
event pan_generated(bitstring).
event expiry_generated(bitstring).
event securecode_generated(bitstring).

(* Processes *)

(* 
   Process C (Customer)
*)
let C_process =
    new pan: bitstring;
    event pan_generated(pan);
    new expiry: bitstring;
    event expiry_generated(expiry);
    (
        out(c, senc(pair(pan, expiry), keyMC));

        in(c, msg2: bitstring);
        let bitstring2 = sdec(msg2, keyMC) in
        (
            out(c, senc(bitstring2, keyAC));

            in(c, msg3: bitstring);
            let bitstring3 = sdec(msg3, keyAC) in
            (
                new securecode: bitstring;
                event securecode_generated(securecode);
                (
                    out(c, senc(securecode, keyAC));

                    in(c, msg5: bitstring);
                    let bitstring5 = sdec(msg5, keyAC) in
                    (
                        let avalue: bitstring = fst(bitstring5) in
                        let signature: bitstring = snd(bitstring5) in 
                        (
                            out(c, senc(pair(avalue, signature), keyMC));

                            in(c, msg6: bitstring);
                            let bitstring6 = sdec(msg6, keyMC) in
                            0
                        )
                    )
                )
            )
        )
    ).

(* 
   Process M (Merchant)
*)
let M_process =
    in(c, msg1: bitstring);
    let pan_expiry = sdec(msg1, keyMC) in
    (
        let pan: bitstring = fst(pan_expiry) in
        let expiry: bitstring = snd(pan_expiry) in
        (
            new nonce_M: bitstring;
            let transaction_details = pair(nonce_M, pair(mname, amt)) in
            let bitstring2 = pair(nonce_M, pair(city, pair(con, pair(curr, pair(amt, pair(mts, pair(brand, pair(pan, pair(expiry, mname))))))))) in
            out(c, senc(bitstring2, keyMC));

            in(c, msg5a: bitstring);
            let bitstring5a = sdec(msg5a, keyMC) in
            (
                let avalue: bitstring = fst(bitstring5a) in
                let signature: bitstring = snd(bitstring5a) in
                (
                    let signed_data = checksign(signature, PK_ACS) in
                    let aav_received: bitstring = fst(signed_data) in
                    let rest: bitstring = snd(signed_data) in
                    let nonce_received: bitstring = fst(rest) in
                    let td_received: bitstring = snd(rest) in
                    event authentication_verified(aav_received, nonce_received, td_received);
                    if nonce_received = nonce_M && td_received = transaction_details then
                        (
                            let bitstring6 = pair(cconfirm, transaction_details) in
                            out(c, senc(bitstring6, keyMC));
                            0
                        )
                    else
                        (
                            out(c, senc(mismatch_msg, keyMC));
                            0
                        )
                )
            )
        )
    ).


(* Process ACS *)
let ACS_process =
    in(c, msg2a: bitstring);
    let bitstring2 = sdec(msg2a, keyAC) in
    let (nonce_M: bitstring, rest0: bitstring) = bitstring2 in
    let (city_var: bitstring, rest1: bitstring) = rest0 in
    let (con_var: bitstring, rest2: bitstring) = rest1 in
    let (curr_var: bitstring, rest3: bitstring) = rest2 in
    let (amt_var: bitstring, rest4: bitstring) = rest3 in
    let (mts_var: bitstring, rest5: bitstring) = rest4 in
    let (brand_var: bitstring, rest6: bitstring) = rest5 in
    let (pan_var: bitstring, rest7: bitstring) = rest6 in
    let (expiry_var: bitstring, mname_var: bitstring) = rest7 in
    (
        let bitstring3 = pair(mname_var, pair(amt_var, pair(pan_var, pair(mesg, expiry_var)))) in
        out(c, senc(bitstring3, keyAC));

        in(c, msg4: bitstring);
        let securecode = sdec(msg4, keyAC) in
        (
            new aav: bitstring;
            new nonce: bitstring;
            let transaction_details = pair(nonce_M, pair(mname_var, amt_var)) in
            event aav_generated(aav, nonce, transaction_details);

            let data_to_sign = pair(aav, pair(nonce, transaction_details)) in
            let signature: bitstring = sign(data_to_sign, SK_ACS) in
            (
                let bitstring5 = pair(aav, signature) in 
                out(c, senc(bitstring5, keyAC));
                0
            )
        )
    ).


(* Attacker Process: Tries to impersonate ACS *)
let Attacker_process =
    (* The attacker intercepts messages and tries to impersonate the ACS *)
    (* For example, intercepting the securecode and sending its own aav and signature *)
    in(c, intercepted_msg: bitstring);
    (* Suppose the attacker can generate their own keys *)
    new Fake_SK: skey;
    let Fake_PK = pk(Fake_SK) in
    (* The attacker creates a fake signature *)
    new fake_aav: bitstring;
    new fake_nonce: bitstring;
    let fake_transaction_details = pair(mname, amt) in
    let fake_data_to_sign = pair(fake_aav, pair(fake_nonce, fake_transaction_details)) in
    let fake_signature = sign(fake_data_to_sign, Fake_SK) in
    let fake_bitstring5 = pair(fake_aav, fake_signature) in
    (* The attacker sends the fake authentication response to the customer *)
    out(c, senc(fake_bitstring5, keyAC));
    0.

(* Queries for Security Verification *)

(* Confidentiality queries remain the same *)
query pan: bitstring; event(pan_generated(pan)) ==> attacker(pan).

(* Query: Can an attacker obtain the card expiry date? *)
query expiry: bitstring; event(expiry_generated(expiry)) ==> attacker(expiry).

(* Query: Can an attacker obtain the secure code? *)
query securecode: bitstring; event(securecode_generated(securecode)) ==> attacker(securecode).

(* Modified Authentication Property Query *)
(* Ensures that the authentication value corresponds to the correct transaction *)
query aav: bitstring, n: bitstring, td: bitstring; 
    inj-event(authentication_verified(aav, n, td)) ==> inj-event(aav_generated(aav, n, td)).

(* Main process including the attacker process *)
process
    (
        (C_process) |
        (M_process) |
        (ACS_process) |
        (!Attacker_process)  (* The attacker can try multiple times *)
    )


(*

RESULTS:

Completing equations...
-- Process 1-- Query event(pan_generated(pan_2)) ==> attacker(pan_2) in process 1
Translating the process into Horn clauses...
select mess(c[],msg2_1)/-5000
select mess(c[],senc(pair(pan_2,y),keyMC[]))/-5000
select mess(c[],senc(pan_expiry_1,keyMC[]))/-5000
Completing...
select mess(c[],senc(pair(x,*signature_3),keyMC[]))/-5000
select mess(c[],senc(pair(*avalue_2,y),keyMC[]))/-5000
Starting query event(pan_generated(pan_2)) ==> attacker(pan_2)
Inside query: trying to prove attacker(pan[])
Completing...
Inside query: proof failed
goal reachable: event(pan_generated(pan[]))
RESULT event(pan_generated(pan_2)) ==> attacker(pan_2) cannot be proved.
-- Query event(expiry_generated(expiry_2)) ==> attacker(expiry_2) in process 1
Translating the process into Horn clauses...
select mess(c[],msg2_1)/-5000
select mess(c[],senc(pair(pan_2,y),keyMC[]))/-5000
select mess(c[],senc(pan_expiry_1,keyMC[]))/-5000
Completing...
select mess(c[],senc(pair(x,*signature_3),keyMC[]))/-5000
select mess(c[],senc(pair(*avalue_2,y),keyMC[]))/-5000
Starting query event(expiry_generated(expiry_2)) ==> attacker(expiry_2)
Inside query: trying to prove attacker(expiry[])
Completing...
Inside query: proof failed
goal reachable: event(expiry_generated(expiry[]))
RESULT event(expiry_generated(expiry_2)) ==> attacker(expiry_2) cannot be proved.
-- Query event(securecode_generated(securecode_2)) ==> attacker(securecode_2) in process 1
Translating the process into Horn clauses...
select mess(c[],msg2_1)/-5000
select mess(c[],senc(pair(pan_2,y),keyMC[]))/-5000
select mess(c[],senc(pan_expiry_1,keyMC[]))/-5000
Completing...
select mess(c[],senc(pair(x,*signature_3),keyMC[]))/-5000
select mess(c[],senc(pair(*avalue_2,y),keyMC[]))/-5000
Starting query event(securecode_generated(securecode_2)) ==> attacker(securecode_2)
Inside query: trying to prove attacker(securecode[msg3 = msg3_1,msg2 = msg2_1]) from mess(c[],msg3_1) && mess(c[],msg2_1)
Completing...
Inside query: proof failed
goal reachable: mess(c[],msg3_1) && mess(c[],msg2_1) -> event(securecode_generated(securecode_2))
Abbreviations:
securecode_2 = securecode[msg3 = msg3_1,msg2 = msg2_1]
RESULT event(securecode_generated(securecode_2)) ==> attacker(securecode_2) cannot be proved.
-- Query inj-event(authentication_verified(aav_1,n,td)) ==> inj-event(aav_generated(aav_1,n,td)) in process 1
Translating the process into Horn clauses...
select attacker(senc(pair(pan_2,y),keyMC[]))/-5000
select attacker(senc(pan_expiry_1,keyMC[]))/-5000
Completing...
select attacker(senc(pair(x,*signature_3),keyMC[]))/-5000
select attacker(senc(pair(*avalue_2,y),keyMC[]))/-5000
Starting query inj-event(authentication_verified(aav_1,n,td)) ==> inj-event(aav_generated(aav_1,n,td))
RESULT inj-event(authentication_verified(aav_1,n,td)) ==> inj-event(aav_generated(aav_1,n,td)) is true.

--------------------------------------------------------------
Verification summary:

Query event(pan_generated(pan_2)) ==> attacker(pan_2) cannot be proved.

Query event(expiry_generated(expiry_2)) ==> attacker(expiry_2) cannot be proved.

Query event(securecode_generated(securecode_2)) ==> attacker(securecode_2) cannot be proved.

Query inj-event(authentication_verified(aav_1,n,td)) ==> inj-event(aav_generated(aav_1,n,td)) is true.

--------------------------------------------------------------



*)