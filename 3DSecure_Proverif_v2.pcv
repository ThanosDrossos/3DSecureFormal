(* Participants *)
const C: data.
const M: data.
const ACS: data.

(* Channel *)
channel c.

(* Types *)
type key.
type data.

(* Symmetric encryption *)
fun senc(data, key): data.
fun sdec(data, key): data.

equation forall m: data, k: key; sdec(senc(m, k), k) = m.

(* Pairing and projections *)
fun pair(data, data): data.
fun fst(data): data.
fun snd(data): data.

equation forall x: data, y: data; fst(pair(x, y)) = x.
equation forall x: data, y: data; snd(pair(x, y)) = y.

(* Digital signature *)
fun sign(data, key): data.
fun verify(data, key): data.

equation forall m: data, k: key; verify(sign(m, k), pk(k)) = m.

(* Public key function *)
fun pk(key): key.

(* Keys *)
free keyMC: key [private].    (* Shared key between C and M *)
free keyAC: key [private].    (* Shared key between C and ACS *)
free SK_ACS: key [private].   (* ACS's private signing key *)
const PK_ACS: key.            (* ACS's public verification key *)

equation pk(SK_ACS) = PK_ACS.

(* Data *)
(* Merchant's data *)
const city: data.
const con: data.
const curr: data.
const amt: data.
const mts: data.
const brand: data.
const mname: data.
const mesg: data.
const cconfirm: data.

(* Events *)
event aav_generated(data).
event authentication_verified(data).

(* Processes *)

(* Process C *)
let C_process =
    (* Generate PAN and expiry *)
    new pan: data;        (* Cardholder's PAN *)
    new expiry: data;     (* Cardholder's expiry date *)

    (* Message 1: C -> M : {pan, expiry}_{keyMC} *)
    out(c, senc(pair(pan, expiry), keyMC));

    (* Receive Message 2: M -> C *)
    in(c, msg2: data);
    let data2 = sdec(msg2, keyMC) in

    (* Message 2a: C -> ACS *)
    out(c, senc(data2, keyAC));

    (* Receive Message 3: ACS -> C *)
    in(c, msg3: data);
    let data3 = sdec(msg3, keyAC) in

    (* Generate secure code *)
    new securecode: data;  (* Cardholder's secure code *)

    (* Message 4: C -> ACS *)
    out(c, senc(securecode, keyAC));

    (* Receive Message 5: ACS -> C *)
    in(c, msg5: data);
    let data5 = sdec(msg5, keyAC) in
    (
        let signature = fst(data5) in
        let avalue = snd(data5) in

        (* Message 5a: C -> M *)
        out(c, senc(pair(avalue, signature), keyMC));

        (* Receive Message 6: M -> C *)
        in(c, msg6: data);
        let data6 = sdec(msg6, keyMC) in
        0
    ).


(* Process M *)
let M_process =
    (* Receive Message 1: C -> M *)
    in(c, msg1: data);
    let pan_expiry = sdec(msg1, keyMC) in
    (
        let pan = fst(pan_expiry) in
        let expiry = snd(pan_expiry) in

        (* Prepare data2 *)
        let data2 = pair(city, pair(con, pair(curr, pair(amt, pair(mts, pair(brand, pair(pan, pair(expiry, mname)))))))) in

        (* Message 2: M -> C *)
        out(c, senc(data2, keyMC));

        (* Receive Message 5a: C -> M *)
        in(c, msg5a: data);
        let data5a = sdec(msg5a, keyMC) in
        (
            let avalue = fst(data5a) in
            let signature = snd(data5a) in

            (* Verify signature *)
            let aav = verify(signature, PK_ACS) in
            event authentication_verified(aav);

            (* Message 6: M -> C *)
            let data6 = pair(cconfirm, pair(mname, amt)) in
            out(c, senc(data6, keyMC));
            0
        )
    ).


(* Process ACS *)
let ACS_process =
    (* Receive Message 2a: C -> ACS *)
    in(c, msg2a: data);
    let data2 = sdec(msg2a, keyAC) in

    (* Message 3: ACS -> C *)
    let data3 = pair(mname, pair(amt, pair(pan, pair(mesg, expiry)))) in
    out(c, senc(data3, keyAC));

    (* Receive Message 4: C -> ACS *)
    in(c, msg4: data);
    let securecode = sdec(msg4, keyAC) in

    (* Generate AAV *)
    new aav: data;
    event aav_generated(aav);

    (* Sign AAV *)
    let signature = sign(aav, SK_ACS) in

    (* Generate avalue *)
    new avalue: data;

    (* Message 5: ACS -> C *)
    let data5 = pair(signature, avalue) in
    out(c, senc(data5, keyAC));
    0
    .

(* Main process *)
process
    ( C_process | M_process | ACS_process )

(* Queries *)
(* Confidentiality of pan, expiry, and securecode *)
query attacker(pan).
query attacker(expiry).
query attacker(securecode).

(* Authentication property *)
query inj-event(authentication_verified(aav: data)) ==> inj-event(aav_generated(aav)).
