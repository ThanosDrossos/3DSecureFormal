// 3D Secure Protocol in Verifpal
// Â© Thanos Drossos, 2024

attacker[active]

// Setup

principal Customer[
    knows private pan, expiry, securecode
    knows private keyCM, keyAC
    generates sessionKey
]

principal Merchant[
    knows private keyCM, keyAM
]

principal ACS[
    knows private keyAC, keyAM
]

// 1. Customer sends card details to Merchant
Customer -> Merchant: [sessionKey]

principal Customer[
    purchaseRequestEnc = ENC(keyCM, CONCAT(pan, expiry))
]

Customer -> Merchant: purchaseRequestEnc

principal Merchant[
    generates city, con, curr, amt, mts, brand, mname
    purchaseRequestDec = DEC(keyCM, purchaseRequestEnc)
    merchantDetails = CONCAT(city, con, curr, brand, mname)
    transactionDetails = CONCAT(merchantDetails, amt, mts, purchaseRequestDec)
    transactionDetailsEnc = ENC(keyCM, transactionDetails)
]

Merchant -> Customer: transactionDetailsEnc

principal Customer[
    transactionDetailsDec = DEC(keyCM, transactionDetailsEnc)
    transactionDetailsEnc2 = ENC(keyAC, transactionDetailsDec)
]

Customer -> ACS: transactionDetailsEnc2

principal ACS[
    generates mesg
    transactionDetailsDec2 = DEC(keyAC, transactionDetailsEnc2)
    authRequest = CONCAT(transactionDetailsDec2, mesg)
    authRequestEnc = ENC(keyAC, authRequest)
]

ACS -> Customer: authRequestEnc

principal Customer[
    authRequestDec = DEC(keyAC, authRequestEnc)
    knows private securecode
    securecodeEnc = ENC(keyAC, securecode)
]

Customer -> ACS: securecodeEnc

principal ACS[
    securecodeDec = DEC(keyAC, securecodeEnc)
    generates aav
    knows private aavSecretKey
    aavEncrypted = PKE_ENC(G^aavSecretKey, aav)
    generates avalue
    authResponse = ENC(CONCAT(avalue, aavEncrypted), keyAC)
]

ACS -> Customer: authResponse

principal Customer[
    authResponseDec = DEC(keyAC, authResponse)
    authResponseEnc2 = ENC(keyCM, authResponseDec)
]

Customer -> Merchant: authResponseEnc2

principal Merchant[
    authResponseDec2 = DEC(keyCM, authResponseEnc2)
    generates cconfirm
    confirmation = CONCAT(cconfirm, mname, amt)
    confenc = ENC(keyCM, confirmation)
]

Merchant -> Customer: confenc

principal Customer[
    confirmationDec = DEC(keyCM, confenc)
]

// Queries

queries[

    // Confidentiality of PAN
    confidentiality? pan

    // Confidentiality of expiry date
    confidentiality? expiry

    // Confidentiality of securecode
    confidentiality? securecode

    confidentiality? securecodeDec
    confidentiality? authResponse
    confidentiality? avalue
    confidentiality? aav

    // Authentication of ACS to Customer
    authentication? Customer -> Merchant: purchaseRequestEnc
    authentication? Merchant -> Customer: transactionDetailsEnc
    authentication? Customer -> ACS: transactionDetailsEnc2
    authentication? ACS -> Customer: authRequestEnc
    authentication? Customer -> ACS: securecodeEnc
    authentication? ACS -> Customer: authResponse

    // Customer confirmation should be fresh
    freshness? cconfirm
]